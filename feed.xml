<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Grey Area</title>
    <link>http://blog.gladwell.me</link>
    <atom:link href="http://blog.gladwell.me/feed.xml" rel="self" type="application/rss+xml" />
    <description>Ricardo Gladwell's Blog</description>
    <language>en-gb</language>
    <pubDate>Sat, 1 Mar 2014 18:26:06 +0000</pubDate>
    <lastBuildDate>Sat, 1 Mar 2014 18:26:06 +0000</lastBuildDate>

    <item>
      <title>Anatomy of a Rebase</title>
      <link>http://blog.gladwell.me/2014/02/anatomy-of-a-rebase.html</link>
      <pubDate>Mon, 3 Mar 2014 00:00:00 +0000</pubDate>
      <guid isPermaLink="false">/2014/02/anatomy-of-a-rebase.html</guid>
      	<description>
	&lt;p&gt;&lt;small&gt;&lt;em&gt;Note:&lt;/em&gt; This article assumes you already know about rebasing and how to perform an &lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Rewriting-History&quot;&gt;interactive rebase&lt;/a&gt;.&lt;/small&gt;&lt;/p&gt;&lt;p&gt;One of the most useful features of git is &lt;strong&gt;rebasing&lt;/strong&gt; and I&apos;ve become a big fan of the &lt;a href=&quot;http://mettadore.com/analysis/a-simple-git-rebase-workflow-explained/&quot;&gt;rebase workflow&lt;/a&gt;. But it&apos;s still an immature area without a lot of guidance. Typically, developers fall into &lt;a href=&quot;http://who-t.blogspot.de/2009/12/on-commit-messages.html&quot;&gt;revision history anti-patterns&lt;/a&gt; leading to unreadable, messy histories.&lt;/p&gt;&lt;p&gt;This article describes a set of &lt;strong&gt;rebase rules&lt;/strong&gt; that I hope helps improve this situation:&lt;/p&gt;&lt;h2&gt;Interactive Rebase Rules&lt;/h2&gt;&lt;p&gt;Group your commits into logical units according to these rules before you publish your feature branch:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;span id=&quot;rebase-rule-1&quot;&gt;&lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Rewriting-History#Splitting-a-Commit&quot;&gt;Split&lt;/a&gt; commits that have more than one reason for change.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span id=&quot;rebase-rule-2&quot;&gt;&lt;a href=&quot;https://help.github.com/articles/interactive-rebase#pick&quot;&gt;Pick&lt;/a&gt; commits that introduce a new reason for changing published code.&lt;/span&gt;&lt;/li&gt;
  &lt;li&gt;&lt;span id=&quot;rebase-rule-3&quot;&gt;&lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Rewriting-History#Reordering-Commits&quot;&gt;Reorder&lt;/a&gt; related commits that share a reason for change so they are adjacent and then:&lt;/span&gt;&lt;br/&gt;a. &lt;span id=&quot;rebase-rule-3a&quot;&gt;&lt;a href=&quot;http://git-scm.com/book/en/Git-Tools-Rewriting-History#Squashing-Commits&quot;&gt;Squash&lt;/a&gt; related commits that add new functionality to unpublished code.&lt;/span&gt;&lt;br/&gt;b. &lt;span id=&quot;rebase-rule-3b&quot;&gt;&lt;a href=&quot;https://help.github.com/articles/interactive-rebase#fixup&quot;&gt;Fixup&lt;/a&gt; related commits that fix errors, warnings or style problems in unpublished code.&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;Following these rules makes the revision history clearer and easier to manage so that even non-techies can read it. It also ensures you don&apos;t break your revision history by rebasing commits that have been published.&lt;/p&gt;&lt;h2&gt;The Single Commit Principal&lt;/h2&gt;&lt;p&gt;The rules are driven by a sort of &lt;a href=&quot;http://c2.com/cgi/wiki?SingleResponsibilityPrinciple&quot;&gt;Single Responsibility Principle&lt;/a&gt; for commits:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;There should only be one logical change per commit.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;That is, a commit should contain differences related to a single reason for change. Such as adding new feature, a refactoring or tidying the code.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;See Also:&lt;/strong&gt; &lt;a href=&quot;https://wiki.openstack.org/wiki/GitCommitMessages#Structural_split_of_changes&quot;&gt;Openstack&apos;s Git Commit Good Practice&lt;/a&gt;&lt;/p&gt;&lt;h2&gt;Example&lt;/h2&gt;&lt;p&gt;I&apos;ll demonstrate the rules using this example of a typical, messy feature branch:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;* 848289d Added header and navbar&lt;br/&gt;| * c46707b Cleaned up formatting in footer&lt;br/&gt;| * eaeefce Cleaned unused imports in shopping class&lt;br/&gt;| * a828f54 Fix: shopping basket was incorrectly summing total&lt;br/&gt;| * b9e8c83 Fix: HTML error in footer&lt;br/&gt;| * fc88cd5 Added full shopping basket implementation&lt;br/&gt;| * &lt;span class=&quot;highlight&quot;&gt;e8c9e72&lt;/span&gt; Implemented hand-over to check-out (partially done)&lt;br/&gt;| * 589b2ec Refactored presentation logic&lt;br/&gt;| * &lt;span class=&quot;highlight&quot;&gt;525abc1&lt;/span&gt; Implemented stick shopping basket (partially done)&lt;br/&gt;| * 743b94f Added unit-tests (failing)&lt;br/&gt;| * b056f3e Added acceptance tests to verify shopping basket (failing)&lt;br/&gt;|/&lt;br/&gt;* f754527 Added footer&lt;/pre&gt;&lt;/code&gt; &lt;/p&gt;&lt;p&gt;You can see in the example above &lt;code&gt;525abc1&lt;/code&gt; and &lt;code&gt;e8c9e72&lt;/code&gt; are &lt;strong&gt;&quot;partial commits&quot;&lt;/strong&gt;. Here, the developer started work on the shopping basket but switched tasks or was interrupted. Following the rules we pick the initial commit (&lt;a href=&quot;#rebase-rule-2&quot;&gt;rule 2&lt;/a&gt;). When then apply &lt;a href=&quot;#rebase-rule-3a&quot;&gt;rule 3a&lt;/a&gt; to reorder and squash the second, related commit. This creates a single, &lt;strong&gt;&quot;feature commit&quot;&lt;/strong&gt; (&lt;code&gt;81a1dcf&lt;/code&gt;):&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;* 41162a7 Cleaned up formatting in footer&lt;br/&gt;* 429e311 Cleaned unused imports in shopping class&lt;br/&gt;* 255171b Fix: shopping basket was incorrectly summing total&lt;br/&gt;* 5758ada Fix: HTML error in footer&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;81a1dcf&lt;/span&gt; Added shopping basket implementation&lt;br/&gt;* db1d08d Refactored presentation logic&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;743b94f&lt;/span&gt; Added unit-tests (failing)&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;b056f3e&lt;/span&gt; Added acceptance tests to verify shopping basket (failing)&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;We can see there are also two &lt;strong&gt;&quot;test commits&quot;&lt;/strong&gt; (commits &lt;code&gt;743b94f&lt;/code&gt; and &lt;code&gt;b056f3e&lt;/code&gt;). In good TDD fashion, failing tests have been written first. The developer then saved his work and committed the tests before he began on the implementation.&lt;/p&gt;&lt;p&gt;I think it makes sense to squash test commits together with the feature commit because:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Tests don&apos;t make much sense without their implementations.&lt;/li&gt;
  &lt;li&gt;It ensures every commit in your revision history will pass its tests which makes forensic analysis of bugs easier.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;If we reorder and squash the tests into the feature commit we get &lt;code&gt;9496bb2&lt;/code&gt;:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;code&gt;* &lt;span class=&quot;highlight&quot;&gt;f604b84&lt;/span&gt; Cleaned up formatting in footer&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;c2133d3&lt;/span&gt; Cleaned unused imports in shopping class&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;37793c9&lt;/span&gt; Fix: shopping basket was incorrectly summing total&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;4ba6157&lt;/span&gt; Fix: HTML error in footer&lt;br/&gt;* 7bd00a3 Refactored presentation logic&lt;br/&gt;* &lt;span class=&quot;highlight&quot;&gt;9496bb2&lt;/code&gt; Added shopping basket&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Already much clearer but we&apos;re not finished yet.&lt;/p&gt;&lt;p&gt;A decision needs to be made when we look at &lt;strong&gt;&quot;refactor commit&quot;&lt;/strong&gt; &lt;code&gt;7bd00a3&lt;/code&gt;. This refactoring simplifies the HTML in our new shopping basket but also touches published code in the footer. So we leave it where it is as per &lt;a href=&quot;#rebase-rule-2&quot;&gt;rule 2&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;This just leaves us with a few &lt;strong&gt;&quot;fix commits&quot;&lt;/strong&gt; (&lt;code&gt;4ba6157&lt;/code&gt;, &lt;code&gt;37793c9&lt;/code&gt;, &lt;code&gt;c2133d3&lt;/code&gt; and &lt;code&gt;f604b84&lt;/code&gt;). We apply &lt;a href=&quot;#rebase-rule-3b&quot;&gt;rule 3b&lt;/a&gt; above: only &lt;code&gt;4ba6157&lt;/code&gt; and &lt;code&gt;f604b84&lt;/code&gt; apply to code outside of the private, feature branch so we leave them. We just fixup the other commits:&lt;/p&gt;&lt;p&gt;&lt;pre&gt;&lt;code class=&quot;prettyprint&quot;&gt;* 7cd853a Cleaned up formatting in footer&lt;br/&gt;* 899dcd3 Fix: HTML error in footer&lt;br/&gt;* 79ad9f6 Refactored presentation logic&lt;br/&gt;* 13b4503 Added shopping basket&lt;/pre&gt;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Finally, we&apos;re finished and ready to publish our readable, clean feature branch.&lt;/p&gt;
	</description>
    </item>

  </channel> 
</rss>
